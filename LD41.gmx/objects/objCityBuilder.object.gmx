<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cellWidth = 32
cellHeight = 32

hoverX = 0
hoverY = 0
okToPlace = false
animT = 0
readyToDraw = false

enabled = false

lastPlacedX = 0
lastPlacedY = 0
suppressIndicatorLastPlaced = false

buildingIndex = 0
buildingCost = 0
ghost = instance_create(0, 0, objGhostCityCell)
ghost.image_alpha = 0.5

money = 450
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not enabled {
    exit
}

readyToDraw = true
animT ++

// Compute which cell we're hovering over
hoverX = floor(mouse_x/cellWidth)*cellWidth
hoverY = floor(mouse_y/cellHeight)*cellHeight

// Temp select which building to place
if keyboard_check_pressed(ord('1')) {
    buildingIndex = 0
}
if keyboard_check_pressed(ord('2')) {
    buildingIndex = 1
}
if keyboard_check_pressed(ord('3')) {
    buildingIndex = 2
}

if buildingIndex == 0 {
    ghost.sprite_index = sprRoad
    buildingCost = 20
} else if buildingIndex == 1 {
    ghost.sprite_index = sprHouse
    buildingCost = 50
} else if buildingIndex == 2 {
    ghost.sprite_index = sprTestWeirdShape
    buildingCost = 300
}

// Do collisions checks to see if it's ok to place here
with ghost {
    x = other.hoverX
    y = other.hoverY
    other.okToPlace = not instance_place(other.hoverX, other.hoverY, objCityCell)
        and (instance_place(other.hoverX+other.cellWidth, other.hoverY, objCityCellRoad)
        or instance_place(other.hoverX-other.cellWidth, other.hoverY, objCityCellRoad)
        or instance_place(other.hoverX, other.hoverY+other.cellHeight, objCityCellRoad)
        or instance_place(other.hoverX, other.hoverY-other.cellHeight, objCityCellRoad))
        and other.money &gt;= other.buildingCost
}
    
// Place buildings
if mouse_check_button_pressed(mb_left) and okToPlace {
    var cellObj = objCityCell
    if buildingIndex == 0 {
        cellObj = objCityCellRoad
    }
    
    with instance_create(hoverX, hoverY, cellObj) {
        sprite_index = other.ghost.sprite_index
        
        if other.buildingIndex == 1 {
            with instance_create(x, y, objWall) {
                image_xscale = 0.5
                image_yscale = 0.5
                x += 8
                y += 8
            }
        } else if other.buildingIndex == 2 {
            mask_index = sprite_index
        }
    }
    
    okToPlace = false
    suppressIndicatorLastPlaced = true
    lastPlacedX = hoverX
    lastPlacedY = hoverY
    
    money -= buildingCost
}

// Stop suppressing indicator when we move our mouse away from the cell
// we just built on.
if suppressIndicatorLastPlaced and
    (hoverX != lastPlacedX or hoverY != lastPlacedY) {
    suppressIndicatorLastPlaced = false
}

// Scroll the camera when you move your mouse to the edges
if scrMouseInWindow() {
    var scrollSpeed = 2
    var edgeDist = 50 // How close to the edge the mouse must be to scroll
    
    /*if mouse_x &lt; view_xview+edgeDist {
        view_xview -= scrollSpeed
    }
    if mouse_x &gt; view_xview+view_wview-edgeDist {
        view_xview += scrollSpeed
    }
    if mouse_y &lt; view_yview+edgeDist {
        view_yview -= scrollSpeed
    }
    if mouse_y &gt; view_yview+view_hview-edgeDist {
        view_yview += scrollSpeed
    }*/
    
    if keyboard_check(ord('A')) {
        view_xview -= scrollSpeed
    }
    if keyboard_check(ord('D')) {
        view_xview += scrollSpeed
    }
    if keyboard_check(ord('W')) {
        view_yview -= scrollSpeed
    }
    if keyboard_check(ord('S')) {
        view_yview += scrollSpeed
    }
    
    var minCameraX = -200
    var maxCameraX = 200
    var minCameraY = -200
    var maxCameraY = 200
    
    view_xview = clamp(view_xview, minCameraX, maxCameraY)
    view_yview = clamp(view_yview, minCameraY, maxCameraY)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not enabled or not readyToDraw {
    exit
}

if not suppressIndicatorLastPlaced {
    var flash = floor(animT/10) mod 2 == 0
    
    //if okToPlace {
    //    draw_sprite_ext(sprHouse, 0, hoverX, hoverY, 1, 1, 0, c_white, 0.5)
    //}
    
    var xAlpha = 0.5
    if flash and okToPlace xAlpha = 1
    ghost.image_alpha = xAlpha
    
    draw_sprite_ext(sprCityCellNoPlace, okToPlace, hoverX, hoverY, 1, 1, 0, c_white, 1)
}

draw_set_font(fontBuild)

// Not enough money text
if (money &lt; buildingCost) {
    draw_set_halign(fa_center)
    draw_set_valign(fa_top)
    scrDrawTextOutline(mouse_x, mouse_y-25, "Not enough cash...", c_red, c_black)
}

// Money text
draw_set_halign(fa_left)
draw_set_valign(fa_top)
scrDrawTextOutline(view_xview+5, view_yview+view_hview-15, '$'+string(money), c_lime, c_black)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
