<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShootPlayerTemp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = -1
t = 0

uiScale = view_wport / view_wview

// Calculate min and max of city
var xMin = 10000
var yMin = 10000
var xMax = -10000
var yMax = -10000
with objFogBlocker {
    xMin = min(xMin, x)
    yMin = min(yMin, y)
    xMax = max(xMax, x)
    yMax = max(yMax, y)
}

var edge = 128;
xMin -= edge
yMin -= edge
xMax += edge
yMax += edge

// Calculate camera movement parameters
x = view_xview+view_wview/2
y = view_yview+view_hview/2

xstart = x
ystart = y

xTarget = floor(xMax+xMin)/2//objCityBuilder.cellWidth/2
yTarget = floor(yMax+yMin)/2//objCityBuilder.cellHeight/2

// Calculate camera scale parameters
wStart = view_wview
hStart = view_hview

wTarget = max(xMax-xMin, view_wview)//view_wview*3
hTarget = max(yMax-yMin, view_hview)//view_hview*3

// If width scales wider than height (the level is really long horizontally),
// then scale height based on how much we scale width (multiply by aspect ratio).
// Same with the other way around.
// Comment this out for a funny squish effect :)
if wTarget/view_wview &gt; hTarget/view_hview {
    hTarget = wTarget*(view_hview/view_wview)
} else {
    wTarget = hTarget*(view_wview/view_hview)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t++

var m = min(t/120, 1)

// Zoom the camera out
view_wview = lerp(wStart, wTarget, m)
view_hview = lerp(hStart, hTarget, m)

// Move the camera
x = lerp(xstart, xTarget, m)
y = lerp(ystart, yTarget, m)

view_xview = x - view_wview/2
view_yview = y - view_hview/2

// Spawn button
if t &gt;= 120 {
    //with instance_create(view_xview+view_wview/2, view_yview+view_hview-80, objButton) {
    with instance_create(view_wport/2, floor(view_hport*0.73), objButton) {
        image_xscale = other.uiScale
        image_yscale = image_xscale
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(scrGetFont(10))
draw_set_halign(fa_center)
draw_set_valign(fa_center)
scrDrawTextOutlineScale(
    view_wport/2, floor(view_hport*0.4),
    'GAME OVER###Score:#'+'#'+'#surviving buildings#last round',
    c_white, c_black, uiScale)
scrDrawTextOutlineScale(
    view_wport/2, floor(view_hport*0.44),
    string(numBuildings),
    c_white, c_black, uiScale*2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
